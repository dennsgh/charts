{{- if not .Values.lldap.existingSecret }}
{{- $secretName := printf "%s-secrets" (include "lldap.fullname" .) -}}
{{- $existing := lookup "v1" "Secret" .Release.Namespace $secretName -}}

{{- $oldUserDnB64 := and $existing (get $existing.data "LLDAP_LDAP_USER_DN") -}}
{{- $oldPassB64   := and $existing (get $existing.data "LLDAP_LDAP_USER_PASS") -}}
{{- $oldJwtB64    := and $existing (get $existing.data "LLDAP_JWT_SECRET") -}}
{{- $oldKeyB64    := and $existing (get $existing.data "LLDAP_KEY_SEED") -}}

{{- $computedUserDN := printf "uid=%s,ou=people,%s" .Values.lldap.adminUsername .Values.lldap.baseDN -}}
{{- $userDN := default $computedUserDN (and $oldUserDnB64 (b64dec $oldUserDnB64)) -}}
{{- $adminPass := default (randAlphaNum 24) (and $oldPassB64 (b64dec $oldPassB64)) -}}
{{- $jwt       := default (randAlphaNum 40) (and $oldJwtB64 (b64dec $oldJwtB64)) -}}
{{- $keyseed   := default (randAlphaNum 32) (and $oldKeyB64 (b64dec $oldKeyB64)) -}}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  labels:
    {{- include "lldap.labels" . | nindent 4 }}
type: Opaque
stringData:
  LLDAP_LDAP_USER_DN: {{ $userDN | quote }}
  LLDAP_LDAP_USER_PASS: {{ $adminPass | quote }}
  LLDAP_JWT_SECRET: {{ $jwt | quote }}
  LLDAP_KEY_SEED: {{ $keyseed | quote }}
{{- end }}
